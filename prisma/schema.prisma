datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// AUTH

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//  USER

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan          Plan      @default(FREE)
  age           DateTime?
  username      String?   @unique
  password      String?   
  
  accounts      Account[]
  sessions      Session[]
  activities    Activity[]  
  reviews       Review[]  
  candidacies   Candidacy[]  

  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt
}

enum Plan {
  FREE
  PREMIUM
}

model Activity {
  id                String    @id @default(cuid())
  slug              String    @unique
  Title             String
  categorie         String
  Information       String
  Date              DateTime
  Hour              String
  Location          String
  Free              Boolean @default(true)
  Link              String?
  userWanted        String
  Icon              String
  enable            Boolean @default(true)
  
  reviews           Review[]   
  candidacies       Candidacy[]

  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Review {
  id                String    @id @default(cuid())
  Title             String
  content           String
  ip                String?
  rating            String
  
  activityId        String
  activity          Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}


model Candidacy {
  id                String    @id @default(cuid())
  status            String

  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  activityId        String
  activity          Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}